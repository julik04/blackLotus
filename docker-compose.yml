version: '3.8'

services:
  # Бэкенд (Node.js)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Порт бэкенда
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASS=mysecretpassword
      - DB_NAME=postgres
      - DB_PORT=5432
      - JWT_SECRET=asdfghjkl
      - SECURITY_PEPPER=dashjdasnm
      - SERVER_PORT=8080
    volumes:
      - ./backend:/app  # Для hot-reload в разработке
      - /app/node_modules
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL
  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=postgres
    ports:
      - "5435:5432"  # Внешний порт 5435 → внутренний 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dumpik.sql:/docker-entrypoint-initdb.d/dump.sql  # Импорт дампа
    restart: unless-stopped
    networks:
      - app-network

  # PgAdmin (веб-интерфейс для БД)
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=secret
    ports:
      - "5050:80"  # Доступ на http://localhost:5050
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app-network

  # Фронтенд (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Порт фронтенда
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://backend:8080  # Для доступа к API
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:  # Постоянное хранилище для PostgreSQL

networks:
  app-network:  # Общая сеть для сервисов
    driver: bridge